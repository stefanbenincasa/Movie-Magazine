{"version":3,"sources":["otherComponents/Search.js","otherComponents/Results.js","App.js","index.js"],"names":["Search","api","useState","title","setTitle","year","setYear","className","onSubmit","e","query","preventDefault","console","log","htmlFor","name","type","value","onFocus","onChange","target","onMouseOver","y","option","document","createElement","innerText","appendChild","defaultValue","Page","movies","moviesToDisplay","upperLimit","currentPage","lowerLimit","i","length","push","map","movie","index","Poster","key","id","Title","Year","poster","plot","Plot","src","alt","height","width","Results","searchResults","formPageOptions","notFound","onClickHandler","setPage","Number","page","Pagination","aria-label","pageNumber","PaginationItem","PaginationLink","href","onClick","App","setResults","displayState","setDisplay","setNotFound","a","getMoviesWithPlot","searchResponse","Promise","resolve","reject","forEach","currentMovie","fetch","imdbID","then","response","json","rawSearch","Error","moviesWithPlot","all","message","style","marginTop","amountOfPages","Math","ceil","htmlElements","element","setAttribute","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.e60aea45.chunk.js","sourcesContent":["import React, {useState} from 'react'\nimport '../stylesheets/search.css'\n\nfunction Search({api}) {\n\n\t// State\n  const [title, setTitle] = useState('')\n  const [year, setYear] = useState('Year')\n    \n\t// Functions\n\tconst populateYears = function(e) {\n\t\tfor (let y = 2020; y >= 1900; y--) {\n\t\t\tlet option = document.createElement('option')\n\t\t\toption.innerText = y\n\t\t\te.target.appendChild(option)\n\t\t}\n\t}\n  const handleSubmit = function(e) {\n\n\t\t// Prevent default form reload\n    e.preventDefault();\n\n    // Rule out default values\n    {\n      let query; \n      if((title === 'Movie title...') || (title === '')) return\n      else if (year === 'Any') {\n\n        // Query api with title only\n        console.log('Result : query with only title')\n        query = `https://www.omdbapi.com/?s=${title}&apikey=62326ae9&`\n      }\n      else {\n\n        // Query api with title and year\n        console.log('Result : query with both title and year')\n        query = `https://www.omdbapi.com/?s=${title}&y=${year}&apikey=62326ae9&`\n      }\n\n      api(query)\n    }\n  }\n\t\n  return (\n    <div className='Search'> \n      \n      <form onSubmit={handleSubmit}>\n        <div className='inputs'>\n\n\t\t\t\t\t<label htmlFor='title'>Title</label>\n          <input \n          name='title' \n          className='title search' \n          type='text'\n          value={title}\n          onFocus={e => setTitle('')}\n          onChange={e => setTitle(e.target.value)}>\n          </input>\n\n\t\t\t\t\t<label htmlFor='year'>Year</label>\n          <select \n\t\t\t\t\tname='year' \n          className='years dropdown'\n\t\t\t\t\tonMouseOver={populateYears}\n          onChange={e => setYear(e.target.value)}>\n\t\t\t\t\t\t<option defaultValue>Any</option>\n          </select>\n        </div> \n\n        <div className='submit'>\n          <button className='submit button' type='submit'> Submit </button>\n        </div>\n      </form>\n\n    </div>\n  )\n}\n\nexport default Search\n","import React, {useState} from 'react'\nimport { Pagination, PaginationItem, PaginationLink } from 'reactstrap';\nimport '../stylesheets/results.css'\n\nfunction Results({searchResults, formPageOptions, notFound}) {\n\n  // Functions\n  const onClickHandler = function(e) {\n    setPage(Number(e.target.innerText))\n  }\n\n  // Current page state of Results\n\t// Runs ONCE, when the component is first initalised\n  const [page, setPage] = useState('1')\n\n  // Determine validity of display - 'no result found' display based on response\n\t// Conditional rendering here\n\tif (notFound) {\n\n\t\treturn <div className='Results'><h1>No such film in our catalogue</h1></div>\n\t}\n\telse {\n\n\t\tconsole.log(formPageOptions)\n\t\t// When displaying slides, display four, then onClick, move to the next four of the Cards\n\t\treturn (\n\t\t\t<div className='Results'>\n\n\t\t\t\t<Pagination aria-label=\"Page navigation example\"> \n\t\t\t\t\t{\n\t\t\t\t\t\tformPageOptions.map((pageNumber, index) => {\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<PaginationItem key={index} id={index} >\n\t\t\t\t\t\t\t\t\t<PaginationLink href=\"#\" onClick={onClickHandler}>\n\t\t\t\t\t\t\t\t\t\t{pageNumber.innerText}\t\n\t\t\t\t\t\t\t\t\t</PaginationLink>\n\t\t\t\t\t\t\t\t</PaginationItem>\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t</Pagination>\n\n\t\t\t\t<Page movies={searchResults} currentPage={page} />\n\t\t\t</div>\n\t\t)\n\t}\n\n}\n\n// Slide comprised of four Cards\nfunction Page({movies, currentPage}) {\n\n  // Determine which movies to display\n  let moviesToDisplay = []\n  let upperLimit = 2 * currentPage\n  let lowerLimit = upperLimit - 2\n  \n  // Create slides of two \n  for (let i = 0; i < movies.length; i++) {\n    if ( (i >= lowerLimit) && (i < upperLimit) ) {\n      moviesToDisplay.push(movies[i])\n      console.log('Displaying ' + i + ' of Movies array')\n    }\n  }\n  \n  return (\n    <div className='Page'>\n      {\n        moviesToDisplay.map((movie, index) => {\n          return <Poster \n          key={index} \n          id={index} \n          title={movie.Title}\n          year={movie.Year}\n          poster={movie.Poster}\n\t\t\t\t  plot={movie.Plot}\n          />\n        })\n      }\n    </div>\n  )\n}\n\n// Individual posters\nfunction Poster({id, title, year, poster, plot}) {\n\n  // Check dimensions to determine display possibility \n  if (poster === 'N/A') {\n\n    return (\n      <div className='Poster'>\n        <p>Theatrical poster unavailable</p>\n\t\t\t\t<div className='overlay'>\n\t\t\t\t\t<h2>{title}</h2>\n\t\t\t\t\t<p>{plot}</p>\n\t\t\t\t\t<h3>{year}</h3>\n\t\t\t\t</div>\n      </div>\n    )\n  }\n  else {\n\n    return (\n      <div className='Poster'>\n        <img \n        src={poster} \n        alt='Theatrical poster unavailable'\n        height='100%'\n        width='100%'\n        />\n        <div className='overlay'>\n\t\t  \t\t<h2>{title}</h2>\n\t\t\t\t\t<p>{plot}</p>\n\t\t\t\t\t<h3>{year}</h3>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Results\n","import React, { useState } from 'react'\nimport Search from './otherComponents/Search'\nimport Results from './otherComponents/Results'\nimport { ButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\nimport './stylesheets/app.css'\n\nfunction App() {\n\n  const [searchResults, setResults] = useState({})\n  const [displayState, setDisplay] = useState('initial')\n\tconst [notFound, setNotFound] = useState(false)\n\n\t// Functions \n  const api = async function(query) {\n\n    const getMoviesWithPlot = function(searchResponse) {\n      \n      const alteredMovies = new Promise((resolve, reject) => {\n\n        let movies = []\n        searchResponse.forEach(movie => {\n          let currentMovie = fetch(`https://www.omdbapi.com/?i=${movie.imdbID}&apikey=62326ae9&)`)\n          .then(response => {\n            return response.json()\n          })\n          movies.push(currentMovie)\n        })\n\n        // Ultimately, promise resolution should be an array of movies that contain plots\n        resolve(movies)\n      })\n\n      return alteredMovies\n    }\n\n    // Construct query for general search and push movies without plot to array\n\t\ttry {\n\n\t\t\tconst rawSearch = await fetch(query)\n\t\t\tconst searchResponse = await rawSearch.json()\n\t\t\tconsole.log(searchResponse)\n\t\t\t\n\t\t\tif(searchResponse.Error === 'Movie not found!') throw Error(searchResponse.Error) \n\n\t\t\t// Search for movies again using moives from search and their ID's, the results shouls have a plot \n\t\t\tconst moviesWithPlot = await getMoviesWithPlot(searchResponse.Search)\n\t\t\tconst movies = await Promise.all(moviesWithPlot)\n\n\t\t\t// Set state\n\t\t\tsetResults(movies)\n\t\t\tsetDisplay('results')\n\t\t\tif (notFound) setNotFound(false)\n\t\t}\n\t\tcatch (Error) {\n\n\t\t\t// Log error\n\t\t\tconsole.log(Error.message)\n\n\t\t\t// Determine error type \n\t\t\tswitch (Error.message) { \n\n\t\t\t\tcase 'Movie not found!'\t:\t\n\t\t\t\t\t\t\tsetNotFound(true);\n\t\t\t\t\t\t\tsetDisplay('results');\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\tdefault\t:\tbreak;\n\t\t\t}\n\n\t\t}\n    \n  }\n\n\tconst formPageOptions = function(e) {\n\n\t\tlet amountOfPages = Math.ceil(searchResults.length / 2)\n\t\tlet htmlElements = []\n\n\t\tfor (let i = 1; i <= amountOfPages; i++) {\n\n\t\t\tlet element\n\t\t\telement = document.createElement('option')\n\n\t\t\tif (i === 1) element.setAttribute('defaultValue', '')\n\t\t\telement.innerText = i\n\t\t\thtmlElements.push(element)\n\t\t}\n\n\t\treturn htmlElements\n\t}\n\n\t// Main\n  if (displayState === 'initial') {\n\n    return (\n      <div className='App center'>\n        <Search api={api} style={{marginTop: '500px'}}/>\n      </div>\n    )\n  }\n  else if (displayState === 'results'){\n\n    return (\n      <div className=\"App\">\n        <Search api={api} />\n        <Results \n\t\t\t\tsearchResults={searchResults}\n\t\t\t\tformPageOptions={formPageOptions()}\n\t\t\t\tnotFound={notFound}\n\t\t\t\t/>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport $ from 'jquery';\nimport Popper from 'popper.js';\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport App from './App.js';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}